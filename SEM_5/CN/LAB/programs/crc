def xor1(a, b):
    result = ""
    n = len(b)

    for i in range(1, n):
        result += '0' if a[i] == b[i] else '1'
    return result

def mod2div(dividend, divisor):
    pick = len(divisor)
    tmp = dividend[:pick]
    n = len(dividend)

    while pick < n:
        if tmp[0] == '1':
            tmp = xor1(divisor, tmp) + dividend[pick]
        else:
            tmp = xor1('0' * pick, tmp) + dividend[pick]
        pick += 1

    # Final step
    if tmp[0] == '1':
        tmp = xor1(divisor, tmp)
    else:
        tmp = xor1('0' * len(tmp), tmp)

    return tmp

def encode_data(data, key):
    l_key = len(key)
    appended_data = data + '0' * (l_key - 1)
    remainder = mod2div(appended_data, key)
    codeword = data + remainder

    print("Remainder :", remainder)
    print("Encoded Data (Data + Remainder) :", codeword)

def check_transmission(input):
    for c in input:
        if c == '1':
            print("Error")
            return
    print("Transmitted and received correctly")

def main():
    data = input("Enter the DataWord (binary string): ")
    key = input("Enter the Divisor (binary string): ")

    encode_data(data, key)

    codeword = input("Enter the CodeWord: ")

    rem = mod2div(codeword, key)
    print("Syndrome is:", rem)
    check_transmission(rem)

if __name__ == "__main__":
    main()

