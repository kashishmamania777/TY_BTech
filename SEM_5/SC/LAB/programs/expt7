import math

def activation(net):
    return 1 / (1 + math.exp(-1*net))


def calc_net(inputs, weights):
    """Calculates the net input for a neuron"""
    x1, x2 = inputs
    w1, w2, w0 = weights
    net = x1*w1 + x2*w2 + w0
    return net


def neuron(net):
    """Applies the activation function to calculate the output"""
    output = activation(net)
    return output


def errorBackPropogation(input_, target):

    lr = 0.25
    v11 = 0.6
    v21 = -0.1
    v01 = 0.3
    v12 = -0.3
    v22 = 0.4
    v02 = 0.5
    w1 = 0.4
    w2 = 0.1
    w0 = -0.2
    print("Learning rate =", lr)
    initial_weights = [v11, v21, v01, v12, v22, v02, w1, w2, w0]
    table1 = [["v11"], ["v21"], ["v01"],
              ["v12"], ["v22"], ["v02"],
              ["w1"], ["w2"], ["w0"]]
    i = 0
    for row in table1:
        row.append(initial_weights[i])
        i +=1
   
    print("\nForward Pass")
    x1, x2 = input_
    table2 = []

    weight = [v11, v21, v01]
    z_in1 = calc_net(input_, weight)
    z1 = neuron(z_in1)
    table2.append(["Z1", z_in1, z1])

    weight = [v12, v22, v02]
    z_in2 = calc_net(input_, weight)
    z2 = neuron(z_in2)
    table2.append(["Z2", z_in2, z2])

    weight = [w1, w2, w0]
    input_ = (z1, z2)
    y_in = calc_net(input_, weight)
    y = neuron(y_in)
    table2.append(["Y", y_in, y])
    printForwardTable(table2)

    error = target - y
    dy = error * y * (1 - y)
    dz1 = dy * w1 * z1 * (1 - z1)
    dz2 = dy * w2 * z2 * (1 - z2)
    print("\nError Calculations")
    print("-----------------------------------------------------------------")
    print("Error\t\t| d1\t\t| d_in1\t\t| d_in2\t\t|")
    print("-----------------------------------------------------------------")
    print("%5.4f\t\t| %5.4f\t| %5.4f\t| %5.4f\t|" % (error, dy, dz1, dz2))
    print("-----------------------------------------------------------------")
    w0 += lr * dy
    w1 += lr * dy * z1
    w2 += lr * dy * z2
    v01 += lr * dy
    v11 += lr * dz1 * x1
    v21 += lr * dz1 * x2
    v02 += lr * dz2
    v12 += lr * dz2 * x1
    v22 += lr * dz2 * x2
    updated_weights = [v11, v21, v01, v12, v22, v02, w1, w2, w0]
    i = 0
    for row in table1:
        row.append(updated_weights[i])
        i +=1
    print("\nWeight Adjustments")
    printWeightAdjustments(table1)
    return


def printForwardTable(table):
    print("------------------------------------------------------------------")
    print("Neuron\t\t | net\t\t\t | output\t\t |")
    print("------------------------------------------------------------------")
    for row in table:
        print(row[0], end = "\t\t | ")
        for value in row[1:]:
            print("%5.4f" % value, end = "\t\t | ")
        print()
    print("------------------------------------------------------------------")
    return


def printWeightAdjustments(table):
    """ Prints the weight updation table"""
    print("------------------------------------------------------------------")
    print("Weight\t\t | Initial value\t | Updated value\t |")
    print("------------------------------------------------------------------")
    for row in table:
        print(row[0], end = "\t\t | ")
        print("%5.1f\t\t | %5.4f\t\t |" % (row[1], row[2]))
    print("------------------------------------------------------------------")
    return


input_value = (0,1)
target = 1
errorBackPropogation(input_value, target)
